{"version":3,"sources":["obstacles.js"],"names":["cc","Class","extends","Component","properties","obstaclePrefab","default","type","Prefab","drawLevelContent","levelContent","i","node","children","destroy","obstacle","levelSetup","currentPosY","self","obswid","obshei","obsX","calculatePosX","alignMethod","width","inputInfo","animationInfo","posXDebt","console","log","obs","class","height","distanceToPre","spacing","align","childnode","instantiate","addChild","setPosition","p","originX","x","originY","y","col","getComponents","Collider","size","addComponent","rotateDir","rotateDirection","moveDown","getComponent","beginDis","distance","speedScale","moveLR","disappear","totalDistance","drawEndlessLevel","level","constructEndless","drawChallengeLevel","levelNum","ls","split","levels","drawNormalLevel","preSetValueLoad","find","preSetInfo","rewindTime","gameTime","rewind","obstaclesInfo","speed","onLoad","status","require","coverDistance","currentScore","start","unitScore","update","dt","dispatchEvent","Event","EventCustom","rewindScale","child","rotation","opacity"],"mappings":"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","file":"obstacles.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // speed: 15,\n        // radius: 190,\n        obstaclePrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n    },\n\n    //绘制关卡内容\n    drawLevelContent: function(levelContent){\n        //如果已经有障碍物则清除\n        for (i in this.node.children)\n            this.node.children[i].destroy()\n        \n        const obstacle = this.levelSetup.obstacle\n\n        let currentPosY = 800 //预设距离，留下500，或者此值在preSet中亦可\n\n        let self = this\n        let obswid, obshei, obsX\n\n        //根据障碍物的align，计算x坐标\n        const calculatePosX = function (alignMethod) {\n            switch (alignMethod) {\n                case \"left\":\n                    return obswid / 2\n                case \"right\":\n                    return self.node.width - (obswid / 2)\n                case \"middle\":\n                    return self.node.width / 2\n                case \"float_left\":\n                    return self.node.width * 5 / 16\n                case \"float_right\":\n                    return self.node.width * 11 / 16\n                case \"rightMost\":\n                    return self.node.width - self.inputInfo.animationInfo.posXDebt\n                case \"leftMost\":\n                    return 0 + self.inputInfo.animationInfo.posXDebt\n                default:\n                    console.log('wrong align: ' + alignMethod)\n                    return\n            }\n        }\n\n        for (let obs of levelContent) {\n            //计算大小和位置信息\n            obswid = obstacle[obs.class][obs.type].width\n            obshei = obstacle[obs.class][obs.type].height\n            currentPosY += obs.distanceToPre * this.spacing //在Y位置画\n            obsX = calculatePosX(obs.align)\n\n            //添加节点以及精灵\n            let childnode = cc.instantiate(self.obstaclePrefab)\n            self.node.addChild(childnode)\n\n            //设置位置\n            childnode.width = obswid\n            childnode.height = obshei\n            childnode.setPosition(cc.p(obsX, currentPosY))\n            childnode.originX = childnode.x\n            childnode.originY = childnode.y\n\n            //设置碰撞\n            let col = childnode.getComponents(cc.Collider)[0]\n            col.size.width = obswid\n            col.size.height = obshei\n\n            //特殊组件\n            if (obs.class == 'Whirl') {\n                switch (obs.type) {\n                    case \"RotMidStrip\":\n                        childnode.addComponent('midRotate')\n                        break\n                    case \"RotSideStrip\":\n                        childnode.addComponent('sideRotate')\n                        break\n                }\n                if (obs.rotateDir === 'L') childnode.rotateDirection = 1\n                else childnode.rotateDirection = -1\n            }\n\n            //动画效果\n            if (obs.moveDown) {\n                childnode.addComponent('moveDown')\n                childnode.getComponent('moveDown').beginDis = obs.moveDown.distance\n                childnode.getComponent('moveDown').speedScale = obs.moveDown.speedScale\n            }\n            if (obs.moveLR) {\n                childnode.addComponent('moveLR')\n                if (obs.align === 'left' || obs.align === 'float_left')\n                    childnode.getComponent('moveLR').speedScale = obs.moveLR.speedScale\n                else childnode.getComponent('moveLR').speedScale = -obs.moveLR.speedScale\n            }\n            if (obs.disappear) {\n                childnode.addComponent('disappear')\n                childnode.getComponent('disappear').beginDis = obs.disappear.distance\n            }\n        }\n\n        this.totalDistance = currentPosY\n    },\n\n    drawEndlessLevel: function(){\n        let level = this.levelSetup.constructEndless()\n\n        this.drawLevelContent(level)\n    },\n\n    drawChallengeLevel: function(levelNum) {\n        let ls = levelNum.split('_')\n        const levelContent = this.levelSetup.levels[\"Normal_\" + ls[1] + '_' + ls[2]]\n        this.drawLevelContent(levelContent)\n    },\n\n    drawNormalLevel: function (levelNum) {\n        //从level中加载关卡内容\n        const levelContent = this.levelSetup.levels[levelNum]\n        this.drawLevelContent(levelContent)\n    },\n\n    preSetValueLoad: function () {\n        this.inputInfo = cc.find('Controller Node').getComponent('controller').preSetInfo\n        this.rewindTime = this.inputInfo.gameTime.rewind\n        this.spacing = this.inputInfo.obstaclesInfo.spacing\n        this.speed = this.inputInfo.obstaclesInfo.speed\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        //游戏状态可以是 off,on,pause,rewind\n        this.status = \"off\"\n\n        //预加载\n        this.preSetValueLoad()\n\n        this.levelSetup = require('levels')\n\n        this.coverDistance = 0\n        this.originY = this.node.y\n        this.currentScore = 0\n    },\n\n    start() {\n        //计算单位分数\n        this.unitScore = this.speed / this.inputInfo.obstaclesInfo.speed\n    },\n\n    update(dt) {\n        switch (this.status) {\n            case \"on\":\n                //游戏正常运行\n                if (this.coverDistance > this.totalDistance + 1.5 * this.node.height) {\n                    //更改为下一关,发送下一关事件\n                    console.log('过关！')\n\n                    this.status = 'off'\n                    this.coverDistance = 0\n                    this.node.y = this.originY\n                    this.node.dispatchEvent(new cc.Event.EventCustom('LevelPassed', true))\n                } else {\n                    this.node.y -= this.speed\n                    this.coverDistance += this.speed\n                    this.currentScore += this.unitScore\n                }\n                break\n            case \"off\":\n                break\n            case \"pause\":\n                break\n            case \"rewind\":\n                //死亡重开\n                if (this.node.y < this.originY) {\n                    //继续\n                    this.node.y += this.coverDistance / this.rewindTime\n                    this.node.rewindScale = this.coverDistance / this.rewindTime / this.speed\n                } else {\n                    this.status = 'on'\n                    this.currentScore -= this.coverDistance / this.inputInfo.obstaclesInfo.speed\n                    this.coverDistance = 0\n\n                    //恢复有动画节点在障碍物画布中的位置和旋转信息\n                    for (let child of this.node.children) {\n                        child.x = child.originX\n                        child.y = child.originY\n                        child.rotation = 0\n                        child.opacity = 250\n                    }\n                }\n                break\n        }\n    },\n});"]}